#include "StdAfx.h"
#include "CodeReceive.h"




CCodeReceive::CCodeReceive(void):_ThreadHandle(NULL)
{
}

CCodeReceive::~CCodeReceive(void)
{
}




class receiver
{
public:
  receiver(boost::asio::io_service& io_service,
      const boost::asio::ip::address& listen_address,
      const boost::asio::ip::address& multicast_address,
	  const unsigned short port)
    : socket_(io_service),_qbuffer(32)

  {
    // Create the socket so that multiple may be bound to the same address.
    boost::asio::ip::udp::endpoint listen_endpoint(
        listen_address, port);
    socket_.open(listen_endpoint.protocol());
    socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));
    socket_.bind(listen_endpoint);

    // Join the multicast group.
    socket_.set_option(
        boost::asio::ip::multicast::join_group(multicast_address));

    socket_.async_receive_from(
        boost::asio::buffer(data_, max_length), sender_endpoint_,
        boost::bind(&receiver::handle_receive_from_direct, this,
          boost::asio::placeholders::error,
          boost::asio::placeholders::bytes_transferred));
  }

  //void handle_receive_from(const boost::system::error_code& error,
  //    size_t bytes_recvd)
  //{
  //  if (!error)
  //  {
  //   // std::cout.write(data_, bytes_recvd);
  //   // std::cout << std::endl;


	 // //char * qb = _qbuffer.GetWriteBuffer();
  //    socket_.async_receive_from(
  //        boost::asio::buffer(qb, max_length), sender_endpoint_,
  //        boost::bind(&receiver::handle_receive_from, this,
  //          boost::asio::placeholders::error,
  //          boost::asio::placeholders::bytes_transferred));
	 // _qbuffer.ReadBufferInc();
  //  }
  //}



  void handle_receive_from_direct(const boost::system::error_code& error,
      size_t bytes_recvd)
  {
    if (!error)
    {
		//解码函数放在这里
//		int srcW,srcH;
		
		AVFrame * frame =_pDecode->DecodeFrames((const u_char*)data_,bytes_recvd);
		if(frame!=NULL)
		{
			int srcW = _pDecode->GetContext()->width;
			int srcH = _pDecode->GetContext()->height;
			//_pSDL->ShowAVFrame(frame,srcW,srcH,_pSDL->Width(),_pSDL->Height());
			if(!_pSDL->InitOk())
			{
				_pSDL->CreateConvertCtx(
					_pDecode->GetContext()->pix_fmt,
					srcW,
					srcH);
			}
			
			_pSDL->Show(frame,srcW,srcH,_pSDL->Width(),_pSDL->Height());
			//显示	
		}


        socket_.async_receive_from(
          boost::asio::buffer(data_, max_length), sender_endpoint_,
          boost::bind(&receiver::handle_receive_from_direct, this,
            boost::asio::placeholders::error,
            boost::asio::placeholders::bytes_transferred));

    }
  }


	
private:
  boost::asio::ip::udp::socket socket_;
  boost::asio::ip::udp::endpoint sender_endpoint_;
  enum { max_length = 1500 };
  char data_[max_length];
  unsigned short multicast_port;


  //int _hWndWidth;
  //int _hWndHeight;
  //HWND _hWnd;
protected:
	QueueRe _qbuffer;


public:
	AVFrame *GetReadBuffer(int& Itemlen)
	{
		return _qbuffer.GetReadBuffer(Itemlen);
	}
	bool IncRead()
	{
		return _qbuffer.ReadBufferInc();
	}
public:
	H264DecoderContext* _pDecode;
    BMSDL_Show        * _pSDL;

};




















DWORD WINAPI ThreadProcReceive(LPVOID param)
{
	CCodeReceive *ccr = (CCodeReceive *)param;
	if(ccr==NULL)
		return 0;
		
	//boost::asio::io_service* pioservice
    boost::asio::io_service& io_service = ccr->io_service;
	io_service.reset();
	try
	{
		receiver r(io_service,
			boost::asio::ip::address::from_string("0.0.0.0"),
			boost::asio::ip::address::from_string(ccr->ip.c_str()),
			ccr->port
			);
		r._pDecode = &(ccr->_decode);
		r._pSDL    = &(ccr->_sdl);
		//设置窗口句柄
	    //r.SetContext(ccr->_hWnd);
		io_service.run();

	}
	catch (std::exception& e)
	{
		AfxMessageBox(e.what());
		//std::cerr << "Exception: " << e.what() << "\n";
	}
	AfxMessageBox("exit thread");
	return 0;
}




BOOL CCodeReceive::StartReceive(string multip,unsigned short uport,HWND hWnd)
{
    
//	_decode.
	_hWnd = hWnd;
	ip    = multip;
	port  = uport;


	if(!_decode.Initialize())
		return FALSE;
	
	if(!_sdl.InithWnd(hWnd))
		return FALSE;
	

	
	//_OneFrameok    = CreateEvent(NULL,FALSE,FALSE,NULL);
	_ThreadHandle  = CreateThread(NULL,0,ThreadProcReceive,this,0,NULL);
	if(_ThreadHandle !=NULL)
		return TRUE;
	return FALSE;
}


BOOL CCodeReceive::StopReceive()
{
	io_service.stop();
	//CloseHandle(this->_ThreadHandle);
	//_ThreadHandle = NULL;
	return TRUE;
}





/*
使用IFilterGraph::ConnectDirect进行连接 

HRESULT   ConnectDirect( 
    IPin   *ppinOut,   //输出PIN 
    IPin   *ppinIn,     //输入PIN 
    const   AM_MEDIA_TYPE   *pmt   //指定媒体类型，在这里指定YV12格式的媒体类型进行连接即可 
); 
*/
